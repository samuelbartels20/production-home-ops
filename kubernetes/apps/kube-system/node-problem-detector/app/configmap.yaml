---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-problem-detector-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: node-problem-detector
data:
  check-network.sh: |
    #!/bin/sh
    # Check network connectivity using available tools
    # Note: NPD container doesn't have ping, so we use alternative methods

    # Check default gateway reachability using /proc/net/route
    DEFAULT_GW=$(awk '$2 == "00000000" {printf "%d.%d.%d.%d\n", "0x" substr($3,7,2), "0x" substr($3,5,2), "0x" substr($3,3,2), "0x" substr($3,1,2)}' /proc/net/route)

    # Check if we have a valid default gateway
    if [ -z "$DEFAULT_GW" ] || [ "$DEFAULT_GW" = "0.0.0.0" ]; then
      echo "Network problem detected: No default gateway configured"
      exit 1
    fi

    # Check if we have active network interfaces (with traffic)
    # Look for interfaces with non-zero packet counts
    ACTIVE_INTERFACES=$(awk 'NR>2 && $2 > 0 {print $1}' /proc/net/dev | wc -l)
    if [ "$ACTIVE_INTERFACES" -eq 0 ]; then
      echo "Network problem detected: No active network interfaces"
      exit 1
    fi

    # Check if we can read network configuration files
    if [ ! -r /proc/net/route ] || [ ! -r /proc/net/dev ]; then
      echo "Network problem detected: Cannot access network configuration"
      exit 1
    fi

    # Network appears to be working
    exit 0

  check-system-stats.sh: |
    #!/bin/sh
    # Check system resource usage using container's /proc filesystem
    # Note: This will show container stats, not host stats
    # CPU usage calculation
    CPU_IDLE=$(awk '/^cpu / {print $5}' /proc/stat)
    CPU_TOTAL=$(awk '/^cpu / {print $2+$3+$4+$5+$6+$7+$8}' /proc/stat)
    CPU_USAGE=$((100 - (CPU_IDLE * 100 / CPU_TOTAL)))

    # Memory usage calculation
    MEM_TOTAL=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
    MEM_AVAILABLE=$(awk '/MemAvailable/ {print $2}' /proc/meminfo)
    MEM_USAGE=$(( (MEM_TOTAL - MEM_AVAILABLE) * 100 / MEM_TOTAL ))

    # Root filesystem usage
    ROOT_USAGE=$(df -k / | awk 'NR==2 {print $5}' | tr -d '%')

    if [ "$CPU_USAGE" -gt 90 ] || [ "$MEM_USAGE" -gt 90 ] || [ "$ROOT_USAGE" -gt 90 ]; then
      echo "System overload detected: CPU: ${CPU_USAGE}%, Memory: ${MEM_USAGE}%, Disk: ${ROOT_USAGE}%"
      exit 1
    fi
    exit 0

  network-problem.json: |
    {
      "plugin": "custom",
      "pluginConfig": {
        "invoke_interval": "30s",
        "timeout": "5s",
        "max_output_length": 80,
        "concurrency": 1,
        "enable_message_change_based_condition_update": false,
        "skip_initial_status": false
      },
      "source": "network-custom-plugin-monitor",
      "conditions": [
        {
          "type": "NetworkProblem",
          "reason": "NetworkError",
          "message": "Network connectivity issues detected"
        }
      ],
      "rules": [
        {
          "type": "permanent",
          "condition": "NetworkProblem",
          "reason": "NetworkError",
          "path": "/npd-custom/scripts/check-network.sh"
        }
      ]
    }

  system-stats.json: |
    {
      "plugin": "custom",
      "pluginConfig": {
        "invoke_interval": "60s",
        "timeout": "10s",
        "max_output_length": 80,
        "concurrency": 1,
        "enable_message_change_based_condition_update": false,
        "skip_initial_status": false
      },
      "source": "system-stats-monitor",
      "conditions": [
        {
          "type": "SystemStatsAnomaly",
          "reason": "SystemOverload",
          "message": "System resource usage anomaly detected"
        }
      ],
      "rules": [
        {
          "type": "temporary",
          "condition": "SystemStatsAnomaly",
          "reason": "SystemOverload",
          "path": "/npd-custom/scripts/check-system-stats.sh"
        }
      ]
    }